networks:
  kafka-network:

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Teste@123"
    ports:
      - "1433:1433"
    networks:
      - kafka-network
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"Teste@123\" -Q \"SELECT 1\" || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
        ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    volumes:
      - zookeeper_data:/bitnami/confluent

  kafka1:
    image: confluentinc/cp-kafka:7.2.2
    container_name: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka1
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    # CORREÇÃO: Adicionado healthcheck para garantir que o Kafka está pronto.
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:19091 --list"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka1:19091"]
        schemaRegistry:
          enabled: false
        redpanda:
          adminApi:
            enabled: false
        kafkaConnect:
          enabled: true
          clusters:
            - name: kafka-connect
              url: http://kafka-connect:8083
    ports:
      - 8080:8080
    # CORREÇÃO: Alterado para esperar a condição de 'service_healthy' do Kafka.
    depends_on:
      kafka1:
        condition: service_healthy
      kafka-connect:
        condition: service_started
    networks:
      - kafka-network

  kafka-connect:
    image: dbz-sql-conn
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:19091"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_GROUP_ID: "debezium-connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect_configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect_offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect_status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    depends_on:
      kafka1:
        condition: service_healthy
    networks:
      - kafka-network

volumes:
  mssql_data: {}
  zookeeper_data: {}
  kafka_data: {}